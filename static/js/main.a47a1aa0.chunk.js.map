{"version":3,"sources":["components/Summary/styles.ts","assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransaction.tsx","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","components/Header/styles.ts","assets/logo.svg","components/Header/index.tsx","components/NewTransactionModal/styles.ts","assets/close.svg","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["Container","styled","div","api","axios","create","baseURL","TransactionsContext","createContext","useTransaction","useContext","TransactionContext","children","useState","transactions","setTransactions","title","setTitle","amount","setAmount","category","setCategory","type","setType","handleClean","event","a","preventDefault","data","createdAt","Date","post","response","transaction","useEffect","get","then","Provider","value","handleNewTranslation","Summary","summary","reduce","acc","deposit","total","withdraw","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","DateTimeFormat","id","Dashboard","header","Content","Header","onOpenNewTransactionModal","logo","onClick","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","isActiveColor","darken","NewTranslationModal","isOpen","onCloseModal","onRequestClose","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a47a1aa0.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 2rem;\n\n  margin-top: -5rem;\n \n div{\n  background: var(--shape);\n  padding: 1.5rem 2rem;\n  border-radius: 0.25rem;\n  color: var(--text-title);\n\n  &.highlight-background {\n    background: var(--green);\n    color: var(--shape);\n  }\n }\n\n  header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  strong {\n    margin-top: 1rem;\n    font-size: 2rem;\n    font-weight: 500;\n    line-height: 3rem;\n    display: block;\n  }\n`","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: 'http://localhost:3000/api',\n})","import { createContext, FormEvent, ReactNode, useContext, useEffect, useState } from 'react';\nimport { api } from '../services/api';\n\ntype Transaction = {\n  id: number;\n  title: string;\n  amount: number;\n  category: string;\n  type: string;\n  createdAt: string;\n}\n\ntype TransactionContextProps = {\n  children: ReactNode\n}\n\ntype TransactionContextData = {\n  transactions: Array<Transaction>;\n  title: string;\n  category: string;\n  type: string;\n  amount: number;\n  handleNewTranslation: (event: FormEvent) => Promise<void>;\n  setTitle: (title: string) => void;\n  setAmount: (amount: number) => void;\n  setCategory: (category: string) => void;\n  setType: (type: string) => void;\n  \n}\n\nconst TransactionsContext = createContext({} as TransactionContextData);\n\nexport function useTransaction() {\n  return useContext(TransactionsContext)\n}\n\nexport function TransactionContext({children}: TransactionContextProps){\n\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [title, setTitle] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [category, setCategory] = useState('');\n  const [type, setType] = useState('deposit');\n\n  function handleClean(){\n    setTitle('')\n    setAmount(0)\n    setCategory('')\n    setType('deposit')\n  }\n\n  async function handleNewTranslation(event: FormEvent){\n    event.preventDefault();\n\n    const data = {\n      title,\n      category,\n      type,\n      amount,\n      createdAt: new Date()\n    }   \n\n    const response = await api.post('/transactions', data)\n    const {transaction} = response.data\n   \n \n    setTransactions(\n      [\n      ...transactions,\n      transaction\n      ]\n      )\n\n    handleClean()\n  }\n\n  useEffect(() => {\n    api.get('transactions')\n      .then(response => setTransactions(response.data.transactions))\n  }, [])\n\n  return (\n    <TransactionsContext.Provider value={{\n      transactions,\n      handleNewTranslation,\n      title,\n      category,\n      amount,\n      type,\n      setCategory,\n      setAmount,\n      setTitle,\n      setType\n      }}>\n      {children}\n    </TransactionsContext.Provider>\n  )\n}","import { Container } from \"./styles\";\n\nimport incomeImg from \"../../assets/income.svg\";\nimport outcomeImg from \"../../assets/outcome.svg\";\nimport totalImg from \"../../assets/total.svg\";\nimport { useTransaction } from \"../../hooks/useTransaction\";\n\nexport function Summary() {\n  const {transactions} = useTransaction();\n\n  const summary = transactions.reduce((acc, transaction) => {\n\n    if(transaction.type === 'deposit'){\n     acc.deposit += transaction.amount\n     acc.total += transaction.amount\n    \n    }else {\n      acc.withdraw += transaction.amount\n      acc.total -= transaction.amount\n    }\n\n    return acc;\n  }, {\n    deposit: 0,\n    withdraw: 0,\n    total: 0\n  });\n\n  return (\n    <Container>\n      <div>\n        <header>\n          <p>Entradas</p>\n          <img src={incomeImg} alt=\"Entradas\" />\n        </header>\n        <strong>{new Intl.NumberFormat('pt-BR', {\n                style: 'currency',\n                currency: 'BRL'\n              }).format(summary.deposit)}</strong>\n      </div>\n\n      <div>\n        <header>\n          <p>Saidas</p>\n          <img src={outcomeImg} alt=\"saidas\" />\n        </header>\n        <strong>- {new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL'}).format(summary.withdraw)}</strong>\n      </div>\n\n      <div className=\"highlight-background\">\n        <header>\n          <p>Total</p>\n          <img src={totalImg} alt=\"Total\" />\n        </header>\n        <strong>{new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL'}).format(summary.total)}</strong>\n      </div>\n    </Container>\n  )\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  margin-top: 4rem;\n\n  table {\n    width: 100%;\n    border-spacing: 0 0.5rem;\n\n    th {\n      color: var(--text-body);\n      font-weight: 400;\n      padding: 1rem 2rem;\n      text-align: left;\n      line-height: 1.5rem;\n    }\n\n    td {\n      padding: 1rem 2rem;\n      border: 0;\n      background: var(--shape);\n      border-radius: 0.25rem;\n      color: var(--text-body);\n\n      &:first-child {\n        color: var(--text-title);\n      }\n\n      &.withdraw {\n        color: var(--red)\n      }\n\n      &.deposit {\n        color: var(--green)\n      }\n    }\n  }\n`;","import { useTransaction } from \"../../hooks/useTransaction\";\nimport { Container } from \"./styles\";\n\nexport function TransactionsTable() {\n  const { transactions } = useTransaction();\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>Titulo</th>\n            <th>Valor</th>\n            <th>Categoria</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {transactions.map((transaction) => (\n            <tr key={transaction.id}>\n              <td>{transaction.title}</td>\n              <td className={transaction.type}>\n                {new Intl.NumberFormat(\"pt-BR\", {\n                  style: \"currency\",\n                  currency: \"BRL\",\n                }).format(transaction.amount)}\n              </td>\n              <td>{transaction.category}</td>\n              <td>\n                {new Intl.DateTimeFormat(\"pt-BR\").format(\n                  new Date(transaction.createdAt)\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Container>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  max-width: 1120px;\n  margin: 0 auto;\n  \n`","import { Summary } from \"../Summary\";\nimport { TransactionsTable } from \"../TransactionsTable\";\nimport { Container } from \"./styles\";\n\nexport function Dashboard(){\n  return (\n    <Container>\n      <Summary/>\n      <TransactionsTable/>\n    </Container>\n  )\n}","import styled from 'styled-components'\n\nexport const Container = styled.header`\n  background: var(--blue);\n`\nexport const Content = styled.div`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2rem 1rem 12rem;\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    font-size: 1rem;\n    padding: 0rem 2rem;\n    background: var(--blue-light);\n    border-radius: 0.25rem;\n    height: 3rem;\n    border: none;\n    color: var(--shape);\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.95)\n    }\n  }\n  \n`","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import { Container, Content } from \"./styles\";\nimport logo from '../../assets/logo.svg'\n\ninterface HeaderProps {\n  onOpenNewTransactionModal: () => void;\n}\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\n  return (\n    <Container>\n      <Content>\n        <img src={logo} alt=\"dt money\"/>\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>\n          Nova transacao\n        </button>\n      </Content>\n    </Container>\n  )\n}","import styled from \"styled-components\";\nimport { darken, transparentize } from 'polished';\n\nexport const Container = styled.form`\n  h2 {\n    color: var(--text-title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n\n  }\n\n  input {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    border-radius: 0.25rem;\n\n    border: 1px solid #d7d7d7;\n    background: #e7e9ee;\n\n    font-weight: 400;\n    font-size: 1rem;\n\n    &::placeholder {\n      color: var(--text-body);\n    }\n\n    & + input {\n      margin-top: 1rem;\n    }\n  }\n\n  button[type=\"submit\"] {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    background: var(--green);\n    color: var(--shape);\n    border-radius: 0.25rem;\n    border: 0;\n    font-size: 1rem;\n    margin-top: 1.5rem;\n    font-weight: 600;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9)\n    }\n  }\n`\n\nexport const TransactionTypeContainer = styled.div`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n`\n\n//Cores dos button ativos Modal\nconst colors = {\n  green: '#33cc95',\n  red: '#e52e4d'\n}\n\ntype RadiosBoxProps = {\n  isActive: boolean;\n  isActiveColor: 'green' | 'red';\n}\n\n\nexport const RadioBox = styled.button<RadiosBoxProps>`\n  height: 4rem;\n  border: 1px solid #d7d7d7;\n  border-radius: 0.25rem;\n\n  background: ${(props) => props.isActive ? transparentize(0.9, colors[props.isActiveColor]) : 'transparent'};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: border-color 0.2s;\n\n  &:hover {\n    border-color: ${darken(0.1, '#d7d7d7')}\n  }\n\n  img {\n    width:20px;\n    height:20px;\n  }\n\n  span {\n    display: inline-block;\n    margin-left: 1rem;\n    font-size: 1rem;\n    color: var(--text-title);\n  }\n`","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import Modal from 'react-modal';\nimport { Container, TransactionTypeContainer, RadioBox } from './styles';\n\nimport closeImg from '../../assets/close.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport incomeImg from '../../assets/income.svg';\nimport { useTransaction } from '../../hooks/useTransaction';\n\ninterface NewTranslationModalProps {\n  isOpen: boolean;\n  onCloseModal: () => void;\n}\n\nexport function NewTranslationModal({isOpen, onCloseModal}: NewTranslationModalProps) {\n const {\n  title,\n  amount,\n  category,\n  type,\n  setTitle,\n  setAmount,\n  setCategory,\n  setType,\n  handleNewTranslation\n} = useTransaction();\n  return (\n    <Modal \n        isOpen={isOpen} \n        onRequestClose={onCloseModal}\n        overlayClassName=\"react-modal-overlay\"\n        className=\"react-modal-content\"\n        >\n          <button type=\"button\" className=\"react-modal-close\" onClick={onCloseModal} >\n            <img src={closeImg} alt=\"Fechar modal\" />\n          </button>\n\n          <Container onSubmit={handleNewTranslation}>\n            <h2>Cadastrar transacao</h2>\n\n            <input \n              placeholder=\"Titulo\" \n              value={title}\n              onChange={event => setTitle(event.target.value)}\n            />\n\n            <input \n              type=\"number\"\n              placeholder=\"Valor\" \n              value={amount}\n              onChange={event => setAmount(Number(event.target.value))}\n            />\n            <TransactionTypeContainer>\n              <RadioBox \n                isActive={type === 'deposit'}\n                isActiveColor=\"green\"\n                onClick={() => setType('deposit')}\n                type=\"button\">\n\n                  <img src={incomeImg} alt=\"Entrada\" />\n                  <span>Entrada</span>\n\n              </RadioBox>\n\n              <RadioBox\n                isActive={type === 'withdraw'}\n                isActiveColor=\"red\"\n                onClick={() => setType('withdraw')}\n                type=\"button\">\n\n                  <img src={outcomeImg} alt=\"Saida\" />\n                  <span>Saida</span>\n\n              </RadioBox>\n            </TransactionTypeContainer>\n            \n            <input \n              placeholder=\"Categoria\" \n              value={category}\n              onChange={event => setCategory(event.target.value)}\n            />\n\n            <button type=\"submit\">\n              Cadastrar\n            </button>\n          </Container>\n    </Modal>\n  )\n}","import {createGlobalStyle} from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --red: #e52e4d;\n    --green: #33cc95;\n    --blue: #5429cc;\n\n    --blue-light: #6933ff;\n\n    --text-title: #363f5f;\n    --text-body: #969cb3;\n\n    --background: #f0f2f5;\n    --shape: #fff;\n  }\n  \n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html {\n    @media (max-width: 1080px) {\n      font-size: 93.75%;\n    }\n\n    @media (max-width: 720px) {\n      font-size: 87.5%;\n    }\n  }\n\n  body {\n    background: var(--background);\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, textarea, button {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .react-modal-overlay {\n    background: rgba(0, 0, 0, 0.5);\n\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .react-modal-content {\n    width: 100%;\n    max-width: 576px;\n    background: var(--background);\n    padding: 3rem;\n    position: relative;\n    border-radius: 0.24rem;\n  }\n\n  .react-modal-close {\n    position: absolute;\n    right: 1.5rem;\n    top: 1.5rem;\n    border: 0;\n    background: transparent;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`","import React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTranslationModal } from './components/NewTransactionModal';\nimport { GlobalStyle } from \"./styles/global\";\nimport { TransactionContext } from './hooks/useTransaction';\n\n// Config Modal\nModal.setAppElement('#root');\n\nexport function App() {\n\n  //Modal add new transaction\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false)\n  function handleOpenNewTransactionModal(){\n    setIsNewTransactionModalOpen(true)\n  }\n  function handleCloseNewTransactionModal(){\n    setIsNewTransactionModalOpen(false)\n  }\n\n  return (\n    <TransactionContext>\n      <GlobalStyle/>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal}/>\n      <Dashboard/>\n      \n      <NewTranslationModal isOpen={isNewTransactionModalOpen} onCloseModal={handleCloseNewTransactionModal}/>\n    </TransactionContext>\n  );\n}\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport { createServer, Model } from \"miragejs\";\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: \"Freelance website\",\n          amount: 6000,\n          category: \"Dev\",\n          type: \"deposit\",\n          createdAt: new Date(\"2021-02-12 09:00:00\"),\n        },\n        {\n          id: 2,\n          title: \"Casa\",\n          amount: 1000,\n          category: \"Aluguel\",\n          type: \"withdraw\",\n          createdAt: new Date(\"2021-02-14 09:00:00\"),\n        },\n      ],\n    });\n  },\n\n  routes() {\n    this.namespace = \"api\";\n\n    this.get(\"/transactions\", () => {\n      return this.schema.all(\"transaction\");\n    });\n\n    this.post(\"/transactions\", (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create(\"transaction\", data);\n    });\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}